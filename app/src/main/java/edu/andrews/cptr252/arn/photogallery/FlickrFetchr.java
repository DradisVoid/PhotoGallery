package edu.andrews.cptr252.arn.photogallery;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;

import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;

import android.net.Uri;
import android.util.Log;

public class FlickrFetchr {
    /** Log message tag */
    public static final String TAG = "PhotoFetcher";

    /** URL for flicker api */
    private static final String ENDPOINT = "https://api.flickr.com/services/rest/";
    /** Required key used to access flickr API (generated by Yahoo) */
    private static final String API_KEY = "0f6c8b2e043dd59fa4ff012f08a67fce";
    /** flickr API method for requesting recent images */
    private static final String METHOD_GET_RECENT = "flickr.interestingness.getList";
    /** code for extra parameter */
    private static final String PARAM_EXTRAS = "extras";
    /** parameter value for requesting small version of image (if available) */
    private static final String EXTRA_SMALL_URL = "url_s";
    /** name of photo tag in XML for the image information */
    private static final String XML_PHOTO = "photo";

    /**
     * Request images from Flickr.
     * @return list of gallery items (images) downloaded from flickr
     */
    public ArrayList<GalleryItem> fetchItems() {
        ArrayList<GalleryItem> items = new ArrayList<>();

        try {
            String url = Uri.parse(ENDPOINT).buildUpon()
                    .appendQueryParameter("method", METHOD_GET_RECENT)
                    .appendQueryParameter("api_key", API_KEY)
                    .appendQueryParameter(PARAM_EXTRAS, EXTRA_SMALL_URL)
                    .build().toString();

            // submit query to flickr and download resulting information
            String xmlString = getUrl(url);
            Log.i(TAG, "Received xml: " + xmlString);
        } catch (IOException ioe) {
            Log.e(TAG, "Failed to catch items", ioe);
        }

        return items;
    }

    /**
     * Retrieve raw data from a given URL and return it as an array of bytes.
     * @param urlSpec String specifying the URL to access.
     * @return Array of bytes from given URL
     * @throws IOException
     */
    public byte[] getUrlBytes(String urlSpec) throws IOException {
        URL url = new URL(urlSpec);
        // Setup a connection object, but don't connect until getInputStrearm called
        HttpURLConnection connection = (HttpURLConnection)url.openConnection();

        try {
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            // Establish a connection
            InputStream in = connection.getInputStream();
            
            if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {
                return null;
            }

            // read 1K of bytes from input stream until nothing left to read.
            // write each set of bytes to the output byte array
            int bytesRead = 0;
            byte[] buffer = new byte[1024];
            while ((bytesRead = in.read(buffer)) > 0) {
                out.write(buffer, 0, bytesRead);
            }
            out.close();
            return out.toByteArray();
        } finally {
            connection.disconnect();
        }
    }

    /**
     * Retrieve raw data from a given URL and return it as a String.
     * @param urlSpec String specifying the URL to access.
     * @return String from given URL
     * @throws IOException
     */
    String getUrl(String urlSpec) throws IOException {
        return new String(getUrlBytes(urlSpec));
    }
    

}
